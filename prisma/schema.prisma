// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Better Auth Account model
model Account {
    id                    String    @id @default(cuid())
    userId                String
    type                  String    @default("oauth")
    providerId            String
    accountId             String
    accessToken           String?
    accessTokenExpiresAt  DateTime?
    idToken               String?
    refreshToken          String?
    expiresAt             Int?
    tokenType             String?
    scope                 String?
    sessionState          String?
    refreshTokenExpiresIn Int?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([providerId, accountId])
}

model Session {
    id        String   @id @default(cuid())
    token     String   @unique
    userId    String
    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ipAddress String   @default("")
    userAgent String   @default("")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                      String                   @id @default(cuid())
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @default(now()) @updatedAt
    deletedAt               DateTime?
    name                    String?
    email                   String?                  @unique
    emailVerified           Json?
    image                   String?
    accounts                Account[]
    sessions                Session[]
    posts                   Post[]
    userOrganizations       UserOrganization[]
    notifications           Notification[]
    organizationInvitations OrganizationInvitation[]
    activeOrganizationId    String?
    verifications           Verification[]
}

// Better Auth Verification model 
model Verification {
    id         String   @id @default(cuid())
    userId     String?
    user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    token      String?
    identifier String
    value      String   @db.Text
    expiresAt  DateTime @map("expires")
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier])
}

model Organization {
    id                      String                   @id @default(cuid())
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @default(now()) @updatedAt
    deletedAt               DateTime?
    name                    String
    logoUrl                 String?
    projects                Project[]
    organizationUsers       UserOrganization[]
    notifications           Notification[]
    organizationInvitations OrganizationInvitation[]
}

model UserOrganization {
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @default(now()) @updatedAt
    deletedAt      DateTime?
    userId         String
    organizationId String
    role           String

    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization Organization @relation(fields: [organizationId], references: [id])

    @@id(name: "id", [userId, organizationId])
}

model Project {
    id             String       @id @default(cuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    deletedAt      DateTime?
    name           String
    description    String?
    userId         String
    organizationId String
    documents      Document[]
    organization   Organization @relation(fields: [organizationId], references: [id])
}

model Document {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    name      String
    projectId String
    state     Json      @default("{}")

    project Project @relation(fields: [projectId], references: [id])
}

model Notification {
    id             String    @id @default(cuid())
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    sentAt         DateTime?
    readAt         DateTime?
    clickedAt      DateTime?
    type           String
    channel        String
    userId         String
    organizationId String

    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization Organization @relation(fields: [organizationId], references: [id])
}

model OrganizationInvitation {
    id              String    @id @default(cuid())
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    expiresAt       DateTime?
    deletedAt       DateTime?
    acceptedAt      DateTime?
    organizationId  String
    invitedByUserId String
    email           String
    role            String

    organization  Organization @relation(fields: [organizationId], references: [id])
    invitedByUser User         @relation(fields: [invitedByUserId], references: [id])
}
