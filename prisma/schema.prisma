// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String    @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @default(now()) @updatedAt
    deletedAt         DateTime?
    name              String?
    email             String?   @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    posts             Post[]
    userOrganizations UserOrganization[]
    notifications     Notification[]
    organizationInvitations OrganizationInvitation[]
    activeOrganizationId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Organization {
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @default(now()) @updatedAt
    deletedAt         DateTime?
    name              String
    logoUrl           String?
    projects          Project[]
    organizationUsers UserOrganization[]
    notifications     Notification[]
    organizationInvitations OrganizationInvitation[]
}

model UserOrganization {
    @@id(name: "id", [userId, organizationId])
    createdAt      DateTime @default(now())
    updatedAt      DateTime @default(now()) @updatedAt
    deletedAt      DateTime?
    userId         String
    organizationId String
    role           String
    
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization Organization @relation(fields: [organizationId], references: [id])   
}

model Project {
    id             String   @id @default(cuid())
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    deletedAt      DateTime?
    name           String
    description    String?
    userId         String
    organizationId String
    documents      Document[]
    organization Organization @relation(fields: [organizationId], references: [id])
}

model Document {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime?
    name      String
    projectId String
    state     Json @default("{}")
    
    project   Project @relation(fields: [projectId], references: [id])
}

model Notification {
  id            String             @id @default(cuid())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  sentAt        DateTime?
  readAt        DateTime?
  clickedAt     DateTime?
  type          String
  channel       String
  userId        String
  organizationId String

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization    @relation(fields: [organizationId], references: [id])
}

model OrganizationInvitation {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime?
  deletedAt DateTime?
  acceptedAt DateTime?
  organizationId String
  invitedByUserId String
  email String
  role String

  organization Organization @relation(fields: [organizationId], references: [id])
  invitedByUser User @relation(fields: [invitedByUserId], references: [id])
}